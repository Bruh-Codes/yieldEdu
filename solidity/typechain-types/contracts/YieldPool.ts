/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace YieldPool {
  export type PositionStruct = {
    positionAddress: AddressLike;
    id: BigNumberish;
    amount: BigNumberish;
    startTime: BigNumberish;
    lockDuration: BigNumberish;
    withdrawn: boolean;
  };

  export type PositionStructOutput = [
    positionAddress: string,
    id: bigint,
    amount: bigint,
    startTime: bigint,
    lockDuration: bigint,
    withdrawn: boolean
  ] & {
    positionAddress: string;
    id: bigint;
    amount: bigint;
    startTime: bigint;
    lockDuration: bigint;
    withdrawn: boolean;
  };
}

export interface YieldPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateYield"
      | "calculateYieldTokens"
      | "deposit"
      | "getActivePositions"
      | "getEduToken"
      | "getPosition"
      | "getTotalStakers"
      | "getTotalValueLocked"
      | "getYieldToken"
      | "unstake"
      | "withdraw"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Deposited" | "Withdrawn"): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateYield",
    values: [YieldPool.PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateYieldTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEduToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateYieldTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActivePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEduToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    duration: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, duration: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    yield_: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, yield_: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    yield: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface YieldPool extends BaseContract {
  connect(runner?: ContractRunner | null): YieldPool;
  waitForDeployment(): Promise<this>;

  interface: YieldPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateYield: TypedContractMethod<
    [position: YieldPool.PositionStruct],
    [bigint],
    "view"
  >;

  calculateYieldTokens: TypedContractMethod<
    [amount: BigNumberish, duration: BigNumberish],
    [bigint],
    "view"
  >;

  deposit: TypedContractMethod<
    [amount: BigNumberish, duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActivePositions: TypedContractMethod<
    [],
    [YieldPool.PositionStructOutput[]],
    "view"
  >;

  getEduToken: TypedContractMethod<[], [string], "view">;

  getPosition: TypedContractMethod<
    [positionId: BigNumberish],
    [YieldPool.PositionStructOutput],
    "view"
  >;

  getTotalStakers: TypedContractMethod<[], [bigint], "view">;

  getTotalValueLocked: TypedContractMethod<[], [bigint], "view">;

  getYieldToken: TypedContractMethod<[], [string], "view">;

  unstake: TypedContractMethod<
    [positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateYield"
  ): TypedContractMethod<
    [position: YieldPool.PositionStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateYieldTokens"
  ): TypedContractMethod<
    [amount: BigNumberish, duration: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [amount: BigNumberish, duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActivePositions"
  ): TypedContractMethod<[], [YieldPool.PositionStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getEduToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [positionId: BigNumberish],
    [YieldPool.PositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalStakers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalValueLocked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getYieldToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[positionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[positionId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Deposited(address,uint256,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "Withdrawn(address,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
